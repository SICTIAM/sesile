<?php

namespace Sesile\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Symfony\Component\HttpFoundation\Request;
use Gedmo\Sluggable\Util as Sluggable;

/**
 * CollectiviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectiviteRepository extends EntityRepository
{
    public function uploadImage($avatar, $collectivite, $dirPath)
    {
        if ($avatar) {
            if ($collectivite->getImage()) {
                $collectivite->removeUpload($dirPath);
            }
            $imageName = sha1(uniqid(mt_rand(), true)).'.'.$avatar->guessExtension();
            $collectivite->setImage($imageName);
            $avatar->move(
                $dirPath,
                $imageName
            );
        }

        return $collectivite;
    }


    public function createCollectiviteFromOzwillo(Request $request)
    {

        $siren = substr(strrchr($request->get('organization')['dc_id'], "/"), 1, 9);
        $em = $this->getEntityManager();

        $collectiviteOzwillo = new CollectiviteOzwillo();
        $collectivite = new Collectivite();
        $collectiviteOzwillo->setInstanceId($request->get('instance_id'));
        $collectiviteOzwillo->setClientId($request->get('client_id'));
        $collectiviteOzwillo->setClientSecret($request->get('client_secret'));
        $collectiviteOzwillo->setInstanceRegistrationUri($request->get('instance_registration_uri'));
        $collectiviteOzwillo->setDcId($request->get('organization')['dc_id']);
//        $collectiviteOzwillo->setServiceId($request->get('instance_id'));
        $collectiviteOzwillo->setDestructionSecret(base64_encode(random_bytes(10)));
        $collectiviteOzwillo->setStatusChangedSecret(base64_encode(random_bytes(10)));
        $organization = $request->get('organization');
        if (isset($organization['id'])) {
            $collectiviteOzwillo->setOrganizationId($organization['id']);
        }
        $collectiviteOzwillo->setCollectivite($collectivite);
        $collectivite->setNom($request->get('organization')['name']);
        $collectivite->setSiren($siren);
        $collectivite->setActive(true);
        $collectivite->setOzwillo($collectiviteOzwillo);
        $collectivite->setDomain(Sluggable\Urlizer::urlize($request->get('organization')['name'], '-'));

        $em->persist($collectivite);
        $em->flush();

        return $collectivite;
    }

    /**
     * @return array
     */
    public function getCollectivitesList()
    {

        return $this
            ->createQueryBuilder('c')
            ->select('c.id', 'c.nom', 'c.domain')
            ->orderBy('c.nom', 'ASC')
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * return alla collectivities that are not present into a sesile migration process
     *
     * @return array
     */
    public function getMigrationCollectivityList()
    {

        return $this
            ->createQueryBuilder('c')
            ->select('c.id', 'c.nom', 'c.domain')
            ->leftJoin('SesileMigrationBundle:SesileMigration', 's', 'WITH', 'c.id = s.collectivityId')
            ->addSelect('s.collectivityId')
            ->where('s.collectivityId IS NULL')
            ->andWhere('c.active = 1')
            ->orderBy('c.nom', 'ASC')
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * this method removes all entries of the table Ref_Collectivite_Users
     * for a collectivity
     *
     * @param $collectivityId
     *
     * @return bool
     * @throws \Doctrine\DBAL\ConnectionException
     * @throws \Doctrine\DBAL\DBALException
     */
    public function clearCollectivityUsers($collectivityId)
    {
        $connection = $this->getEntityManager()->getConnection();
        $connection->beginTransaction();
        $sql = 'DELETE FROM Ref_Collectivite_User where collectivite_id= :collectivityId';
        $result = $connection->executeQuery(
            $sql,
            ['collectivityId' => $collectivityId]
        );
        if ($result) {
            $connection->commit();

            return true;
        }
        $connection->rollBack();

        return false;

    }
}
