<!--
<div class="row row-padding">
    <div class="col-lg-3 col-lg-offset-3">
        <button type="button" class="btn btn-info btn-block btn-voirInter" id="seeAllUsers">
            <span class="glyphicon glyphicon-plus-sign"></span> Déplier toutes les étapes</button>
    </div>
    <div class="col-lg-3">
        <button type="button" class="btn btn-info btn-block btn-voirInter" id="hiddeAllUsers">
            <span class="glyphicon glyphicon-minus-sign"></span> Replier toutes les étapes</button>
    </div>
</div>
-->
<div class="row" id="circuit_main">
    <div {#class="col-lg-12"#} id="circuit_etapes">
        <div id="contetapes">
            {% for etape in service %}

                <div class="{#col-lg-2 #}well etapes-circuit">

                    <button type="button" class="btn btn-danger btn-suppetape" id="suppetape"><span class="glyphicon glyphicon-remove"></span></button>

                    <div class="text-center"><h4 title="merci de renseigner au moins un utilisateur dans l'étape vide ou de la supprimer" x-moz-errormessage="merci de renseigner au moins un utilisateur dans l'étape vide ou de la supprimer">Valideur</h4></div>
                    {#<input type="hidden" name="etape_id" value="{{ etape.id }}">#}
                    <select class="selusers" multiple="multiple" style="width: 100%" data-etape="{{ etape.id }}" required="required" title="merci de renseigner au moins un utilisateur dans l'étape vide ou de la supprimer" x-moz-errormessage="merci de renseigner au moins un utilisateur dans l'étape vide ou de la supprimer">
                        <optgroup label="Groupes d'utilisateurs">
                            {% for userPack in userPacks %}
                                <option value="userpack-{{ userPack.id }}" {% if userPack in etape.userPacks %} selected{% endif %} data-type="groupe"><i class="fa fa-group"></i>{{ userPack.nom }}</option>
                            {% endfor %}
                        </optgroup>
                        <optgroup label="utilisateurs">
                            {% for user in users %}
                                <option value="user-{{ user.id }}" data-etape="{{ etape.id }}" data-type="user" {% if user in etape.users %} selected{% endif %}>{{ user.nom }} {{ user.prenom }}</option>
                            {% endfor %}
                        </optgroup>
                    </select>

                    <button type="button" class="btn btn-info btn-block btn-voirInter" id="seeUsers"><span class="glyphicon glyphicon-plus-sign"></span> Voir les intervenants</button>
                    <button type="button" class="btn btn-info btn-block btn-voirInter" id="hiddeUsers"><span class="glyphicon glyphicon-minus-sign"></span> Cacher les intervenants</button>

                </div>
            {% endfor %}
            <input type="hidden" name="valeurs" id="valeurs">
            <div class="{#col-lg-2 #}text-center div-btn-ajout-etape">
                <button type="button" class="btn btn-circle-lg btn-info first" id="addetape"><span class="glyphicon glyphicon-plus"></span> </button>

            </div>
        </div>

    </div>
</div>

<script type="text/javascript" src="{{ asset('/js/jquery-ui.min.js') }}"></script>
<script type="text/javascript" src="{{ asset('/js/jquery.mousewheel.min.js') }}"></script>
<script type="text/javascript" src="{{ asset('/js/circuit_etape.js') }}"></script>
<link rel="stylesheet" href="{{ asset('/css/circuit.css') }}"/>
<script>
    $(document).ready(function() {
        /*$('.first').popover({
            trigger: 'hover',
            container: 'body',
            content: 'Ajouter une étape',
            placement: 'bottom'
        });*/


        // Fonction permettant de determinier si le scroll est présent sur un élément
        // Returns { vertical: true/false, horizontal: true/false }
        $.fn.hasScrollBar = function() {
            var e = this.get(0);
            return {
                vertical: e.scrollHeight > e.clientHeight,
                horizontal: e.scrollWidth > e.clientWidth
            };

        };


        scrollFrisque();


        // Fonction permettant d agrandir la frise dynamiquement.
        function scrollFrisque () {
            var widthLine = $('#circuit_main').css('width');
            $('#circuit_etapes').css('width', widthLine);
            var widthScroll = $('.etapes-circuit').length * 300 + 250;
            $('#contetapes').css('width', widthScroll);
//            console.log('widthScroll : ' + widthScroll);
        }

        // Sans bootstrap c'est la galère. Faut se gérer le rediemensionnement de la fenêtre à la mano...
        window.onresize = function(event) {
            scrollFrisque();
            scrollActive();
        };

        // Bug pourquoi devoir remmettre la fonction et la relancer dans l ajout d etape ?
        function creerFleches() {
            $(".fleche_circuit").remove();
            $("<span/>").addClass("fleche_circuit glyphicon glyphicon-chevron-right").insertAfter(".etapes-circuit:not(:last)");
        }

        // Pour le bouton de suppression de l etape
        $(document).on('click','#suppetape',function() {
            $(this).parent().remove();
            scrollFrisque();
            creerFleches();
            isEnoughEtapes();
            scrollActive();
        });

        $(document).on('click', '#addetape', function (e) {
            /*
             A chaque fois qu'on clique sur le bouton bleu une nouvelle etape de validation se crée
             */

            $('.first').popover('destroy');
            $('.dyn').popover('destroy');
            $(this).parent().remove();
            $('.popover').remove();
            var contetapes = $('#contetapes');

            contetapes.append('' +
            '<div class="well etapes-circuit"><div class="text-center"><h4></h4></div><select class="selusers" required="required" title="merci de renseigner au moins un utilisateur dans l\'étape vide ou de la supprimer" x-moz-errormessage="merci de renseigner au moins un utilisateur dans l\'étape vide ou de la supprimer" multiple="multiple" style="width: 100%" data-etape="0"><optgroup label="Groupes d\'utilisateurs">{% for userPack in userPacks %}<option value="userpack-{{ userPack.id }}" data-type="groupe">{{ userPack.nom }}</option>{% endfor %}</optgroup><optgroup label="utilisateurs">{% for user in users %}<option value="user-{{ user.id }}" data-type="user">{{ user.nom }} {{ user.prenom }}</option>{% endfor %}</optgroup></select><button type="button" class="btn btn-danger btn-suppetape" id="suppetape"><span class="glyphicon glyphicon-remove"></span></button><button type="button" class="btn btn-info btn-block btn-voirInter" id="seeUsers"><span class="glyphicon glyphicon-plus-sign"></span> Voir les intervenants</button><button type="button" class="btn btn-info btn-block btn-voirInter" id="hiddeUsers" style="display:none;"><span class="glyphicon glyphicon-minus-sign"></span> Cacher les intervenants</button></div>' +
            '<div class="text-center div-btn-ajout-etape"><button type="button" class="btn btn-circle-lg btn-info dyn" id="addetape"><span class="glyphicon glyphicon-plus"></span></button></div>');
            $('.dyn').popover('destroy');
            $('.dyn').popover({
                trigger: 'hover',
                container: 'body',
                content: 'Ajouter une étape',
                placement: 'bottom'
            });

            scrollFrisque();

            function formatState (state) {

                if (!state.id) { return state.text; }
                var tabType = state.id.split('-');

                if(tabType[0] == 'user')
                {
                    return '<span><span class="glyphicon glyphicon-user"></span>&nbsp;&nbsp;'+ state.text+'</span>';
                }
                else{
                    return '<span data-toggle="popover" style="display: block" data-id="'+tabType[1]+'"><i class="fa fa-group"></i>&nbsp;&nbsp;'+ state.text+'</span>';
                }

            }


            $("select.selusers").select2({
                formatResult: formatState,
                formatSelection:formatState

            });



            initPopover();
            $(".selusers").on("select2-selecting", function () {
                $('[data-toggle="popover"]').popover('destroy');
                initPopover();

                //alert('select')
            });

            $(".selusers").on("select2-close", function () {
                //alert('close')
                initPopover();

            });
            $(".selusers").on("select2-open", function () {
                initPopover();

            });

            e.stopImmediatePropagation();
            creerFleches();

            isEnoughEtapes();

            scrollActive();
        });

        /**
         * Fonction permettant de desactiver le bouton envoyer si il n y a pas d etapes dans le formulaire
         */
        function isEnoughEtapes() {
            if ($('.etapes-circuit').length == 0) {
                $('#Mybutton').addClass('disabled');
            } else {
                $('#Mybutton').removeClass('disabled');
            }
        }




        /*
         * Fonction permettant de recuperer les utilisateurs et les groupes pour l'envoie
         * La fonction recupère toutes les informations des selects et les stringify pour les passer dans un champs hidden
         */
        var tabGeneral = [];
        $('#new_classeur').submit(function(){
            /*
             * Pour chaque etape de validation créé on récupère les options sélectionnées
             *
             * */
            $('select.selusers').each(function(){

                var Etapes = {};
                Etapes.etape_id = $(this).data('etape');
                Etapes.etapes = [];

                if($(this).val())
                {
                    $(this).find(':selected').each(function(){
                        /*
                         * Pour chaque option selectionnée, on récupère son data-type(groupe ou user) et sa value (id du user ou du userPack)
                         * */
                        Etapes.etapes.push({
                            entite: $(this).data('type'),
                            id: $(this).val()
                        });
                    });
                } else {
                    e.preventDefault();
                }
                tabGeneral.push(Etapes);
            });

            /*
             * on met tout ça dans un tableau que l'on stringifie et qu'on met dans le hidden
             * */
            $('#valeurs').val(JSON.stringify(tabGeneral));

        });

        $(function() {
            $( "#contetapes" ).sortable({
                items :'> div:not(.etape-validante, .div-btn-ajout-etape)',
                tolerance: "pointer",
                stop: function (e, ui) {
                    creerFleches();
                }
            }).disableSelection();
        });

        // Pour le scroll à la molette de la souris
        // Si le scroll est présent on active le scroll horizontal de la souris
        function scrollActive() {

            if ($('#circuit_etapes').hasScrollBar().horizontal) {
                $("#circuit_etapes").mousewheel(function(event, delta) {
                    this.scrollLeft -= (delta * 100);
                    event.preventDefault();
                });
            }
            else {
                $("#circuit_etapes").unmousewheel();
            }
        }
        scrollActive();

/*
        $(document).on("click",$(".react"), function(e) {
                alert('test')
        });
        */
/*

        $.ajax({
            url: Routing.generate('show_userpack', {id: 1}),
            method: "GET",
            success:function(resp){
                $.each (resp,function(index,value){
                   alert(value);
                });
            }
        });
*/
    });
</script>