<?php

namespace Sesile\ClasseurBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ClasseurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClasseurRepository extends EntityRepository {


    public function getAllClasseursVisibles ($userId) {

        $sort = "c.creation";
        $order = "DESC";

        $classeurs =  $this
            ->createQueryBuilder('c')
            ->join('c.visible', 'v', 'WITH', 'v.id = :id')
            ->setParameter('id', $userId)
            ->join('c.type', 't')
            ->addSelect('t')
            ->join('c.user', 'u')
            ->addSelect('u')
            ->orderBy($sort, $order)
            ->getQuery()
            ->getResult()
        ;

        return $classeurs;
    }

    public function getClasseursVisibles ($userId, $sort, $order, $limit, $start) {

        ($sort == "user.nom") ? $sort = "u.Nom" : $sort = "c.".$sort;

        $classeurs =  $this
            ->createQueryBuilder('c')
            ->join('c.visible', 'v', 'WITH', 'v.id = :id')
            ->setParameter('id', $userId)
            ->join('c.type', 't')
            ->addSelect('t')
            ->join('c.user', 'u')
            ->addSelect('u')
            ->orderBy($sort, $order)
            ->setFirstResult($start)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;

        $classeurs = $this->addClasseursValue($classeurs, $userId);

        return $classeurs;
    }


    public function getClasseursValidable ($classeursId, $sort, $order, $limit, $start, $userId) {

        ($sort == "user.nom") ? $sort = "u.Nom" : $sort = "c.".$sort;

        $status = array(0,1,4);

        $classeurs = $this
            ->createQueryBuilder('c')
            ->where('c.id IN (:id)')
            ->andWhere('c.status IN (:status)')
            ->setParameter('id', $classeursId)
            ->setParameter('status', $status)
            ->join('c.type', 't')
            ->addSelect('t')
            ->join('c.user', 'u')
            ->addSelect('u')
            ->orderBy($sort, $order)
            ->setFirstResult($start)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;

        $classeurs = $this->addClasseursValue($classeurs, $userId);

        return $classeurs;

    }

    public function getClasseursRetractable ($classeursId, $sort, $order, $limit, $start, $userId) {

        ($sort == "user.nom") ? $sort = "u.Nom" : $sort = "c.".$sort;

        $status = 1;

        $classeurs = $this
            ->createQueryBuilder('c')
            ->where('c.id IN (:id)')
            ->andWhere('c.status = :status')
            ->setParameter('id', $classeursId)
            ->setParameter('status', $status)
            ->join('c.type', 't')
            ->addSelect('t')
            ->join('c.user', 'u')
            ->addSelect('u')
            ->orderBy($sort, $order)
            ->setFirstResult($start)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;

        $classeurs = $this->addClasseursValue($classeurs, $userId);

        return $classeurs;

    }

    public function getClasseursremovable ($userId, $sort, $order, $limit, $start) {

        ($sort == "user.nom") ? $sort = "u.Nom" : $sort = "c.".$sort;

        $status = 3;

        $classeurs = $this
            ->createQueryBuilder('c')
            ->join('c.visible', 'v', 'WITH', 'v.id = :id')
            ->andWhere('c.status = :status')
            ->setParameter('id', $userId)
            ->setParameter('status', $status)
            ->join('c.type', 't')
            ->addSelect('t')
            ->join('c.user', 'u')
            ->addSelect('u')
            ->orderBy($sort, $order)
            ->setFirstResult($start)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;

        $classeurs = $this->addClasseursValue($classeurs, $userId);

        return $classeurs;

    }

    public function getClasseursById($userId, $id) {

        $classeur =  $this
            ->createQueryBuilder('c')
            ->where('c.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getSingleResult()
        ;

        $classeur = $this->addClasseurValue($classeur, $userId);

        return $classeur;
    }

    public function addClasseursValue($classeurs, $userId) {
        $classeurs = $this->isClasseursValidableByUser($classeurs, $userId);
        $classeurs = $this->isClasseursSignable($classeurs);
        $classeurs = $this->isClasseursRetractableByUser($classeurs, $userId);
        return $classeurs;
    }

    public function addClasseurValue($classeur, $userId) {
        $this->isClasseurValidableByUser($classeur, $userId);
        $this->isClasseurSignable($classeur);
        $this->isClasseurRetractableByUser($classeur, $userId);
        return $classeur;
    }

    public function isClasseursSignable(array $classeurs) {
        foreach ($classeurs as $classeur) {
            $this->isClasseurSignable($classeur);
        }
        return $classeurs;
    }


    /**
     * Function pour tester si le classeur est signable
     * @param Classeur $classeur
     * @return Classeur
     */
    public function isClasseurSignable(Classeur $classeur) {

        if($classeur->isAtLastValidant() AND $classeur->getValidable()){
            $docs = $classeur->getDocuments();
            foreach($docs as $doc){
                if(in_array($doc->getType(), $classeur->typeSignable)){
                    $classeur->setSignableAndLastValidant(true);
                    return $classeur;
                }
            }
        }
        $classeur->setSignableAndLastValidant(false);
        return $classeur;
    }

    public function isClasseursValidableByUser(array $classeurs, $userId) {
        foreach ($classeurs as $classeur) {
            $this->isClasseurValidableByUser($classeur, $userId);
        }
        return $classeurs;
    }

    public function isClasseurValidableByUser(Classeur $classeur, $userId) {
        $etapeValidante = $classeur->getEtapeValidante();

        if ($etapeValidante) {
            $validantUsersId = $etapeValidante->getValidantUsersId();
        } else {
            $validantUsersId = array();
        }

        if(in_array($userId, $validantUsersId) AND $classeur->getStatus() != 2 AND $classeur->getStatus() != 3) {
            $classeur->setValidable(true);
        }
        else {
            $classeur->setValidable(false);
        }
        return $classeur;
    }

    public function isClasseursRetractableByUser(array $classeurs, $userId) {
        foreach ($classeurs as $classeur) {
            $this->isClasseurRetractableByUser($classeur, $userId);
        }
        return $classeurs;
    }

    public function isClasseurRetractableByUser(Classeur $classeur, $userId) {
        $em = $this->getEntityManager();
        $etapeValidante = $classeur->getEtapeValidante();
        $validantUserId = null;
        if ($etapeValidante){
            $etapeRetractable = $em->getRepository('SesileUserBundle:EtapeClasseur')->getPreviousEtape($etapeValidante);
            if ($etapeRetractable) {
                $validantUserId = $etapeRetractable->getUserValidant()->getId();
            }
        }

        if(($userId == $validantUserId OR $classeur->countEtapeValide() == 0) AND $classeur->getStatus() == 1) {
            $classeur->setRetractable(true);
        }
        else {
            $classeur->setRetractable(false);
        }
        return $classeur;
    }

    /**
     * Fonction permettant la mise a jour de la visibilite
     *
     * @param Classeur $classeur
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function setUserVisible(Classeur $classeur) {
        $em = $this->getEntityManager();

        switch ($classeur->getVisibilite()) {
            // Privé soit le circuit
            case 0:
                $users = $em->getRepository('SesileUserBundle:EtapeClasseur')->findAllUsers($classeur);
                break;

            // Public
            case 1:
                $users = $em->getRepository('SesileUserBundle:User')->findByCollectivite($classeur->getUser()->getCollectivite());
                break;

            // Privé à partir de moi
            case 2:
                $users = $em->getRepository('SesileUserBundle:EtapeClasseur')->findAllUsersAfterMe($classeur);
                break;

            // Pour le service organisationnel (et le circuit)
            case 3:
                $usersGroupe = $em->getRepository('SesileUserBundle:Groupe')->findUsers($classeur->getCircuitId());
                $usersCircuit = $em->getRepository('SesileUserBundle:EtapeClasseur')->findAllUsers($classeur);
                $users = array_merge($usersGroupe, $usersCircuit);
                break;
        }

        $users[] = $classeur->getUser();
        if ($classeur->getCopy()) {
            $users = array_merge($users, $classeur->getCopy());
        }
        $users = array_unique($users);
        if ($classeur->getVisible()) {
            $classeur->getVisible()->clear();
        }

        foreach ($users as $user) {
            $classeur->addVisible($user);
        }

        $em->persist($classeur);
        $em->flush();

    }


    public function countClasseurToValidate($userid) {

        return $this
            ->createQueryBuilder('c')
            ->select('c.status', 'c.id')
            ->where('c.status = :sta')
            ->orWhere('c.status = :stat')
            ->setParameter('sta', 1)
            ->setParameter('stat', 4)
            ->join('c.visible', 'v', 'WITH', 'v.id = :id')
            ->setParameter('id', $userid)
            ->getQuery()
            ->getResult()
            ;
    }


    /**
     * On passe le classeur en parametre et la fonction retourne un tableau d'objet avec users validant du classeur
     *
     * @param Classeur $classeur
     * @return array
     *
     */
    public function getValidant(Classeur $classeur) {
        $em = $this->getEntityManager();

        $tabEtapeClasseur = explode(',',$classeur->getOrdreValidant());
        $usersValidant = array();


        /**
        * Pour réucpérer le validant je récupère le dernier id de la liste getOrdreValidant
        */

        $etapeClasseurs = $em->getRepository('SesileUserBundle:EtapeClasseur')->findOneById($tabEtapeClasseur[count($tabEtapeClasseur)-1]);

        if($etapeClasseurs !== null && $classeur->getStatus() != 2) {

            $users = $etapeClasseurs->getUsers();

            $userPacks = $etapeClasseurs->getUserPacks();
            foreach ($userPacks as $userPack) {
                $usersP = $userPack->getUsers();
                $usersValidant = array_merge($usersValidant, $usersP->toArray());
            }

            if($users !== null) {
                $usersValidant = array_merge($users->toArray(), $usersValidant);
            }
            $usersValidant = array_unique($usersValidant);

        }
        elseif ($classeur->getStatus() == 0
            || ($classeur->getStatus() == 4 && $etapeClasseurs === null)
        ) {
            $user = $em->getRepository('SesileUserBundle:User')->findOneById($classeur->getUser());
            $usersValidant[] = $user;
        }
        else {
            $usersValidant = array();
        }

        return $usersValidant;

    }


    /**
     * On passe le classeur en parametre et la fonction retourne un tableau d'objet avec users validant du classeur de l étape précedente
     *
     * @param Classeur $classeur
     * @return array
     */
    public function getPrevValidant(Classeur $classeur) {

        $em = $this->getEntityManager();
        $etapeClasseurs = $em->getRepository('SesileUserBundle:EtapeClasseur')->findOneBy(
            array(
                'classeur' => $classeur->getId(),
                'ordre' => $classeur->getOrdreEtape()
            )
        );

        if ($etapeClasseurs !== null) {
            $users = $etapeClasseurs->getUsers();
            $usersValidant = array();

            $userPacks = $etapeClasseurs->getUserPacks();
            foreach ($userPacks as $userPack) {
                $usersP = $userPack->getUsers();
                $usersValidant = array_merge($usersValidant, $usersP->toArray());
            }

            $usersValidant = array_merge($users->toArray(), $usersValidant);
            $usersValidant = array_unique($usersValidant);
        }
        else {
            $usersValidant = array();
        }

        return $usersValidant;
    }



    public function getPrevValidantForRetract(Classeur $classeur) {

        $prevValidant = explode(',', $classeur->getCircuit());
        $prevValidant = end($prevValidant);
        if (!$prevValidant) {
            $prevValidant = $classeur->getUser();
        }

        return $prevValidant;
    }

    /**
     * Fonction pour valider les classeurs
     *
     * @param Classeur $classeur
     * @return Classeur
     */
    public function validerClasseur (Classeur $classeur) {

        $ordreEtape = $classeur->getOrdreEtape();
        $ordreEtape++;


        $em = $this->getEntityManager();
        $currentEtape = $em->getRepository('SesileUserBundle:EtapeClasseur')->findBy(
            array('classeur' => $classeur)
        );


        /**
         * Pour réucpérer le validant je récupère le dernier id de la liste getOrdreValidant
         */
        $tabEtapeClasseur = explode(',',$classeur->getOrdreValidant());
        $etapeClasseurs = $em->getRepository('SesileUserBundle:EtapeClasseur')->findOneById($tabEtapeClasseur[count($tabEtapeClasseur)-1]);


        $nbEtapesClasseur = count($classeur->getEtapeClasseurs());


        // Si c est la derniere etape
        if($nbEtapesClasseur == $ordreEtape) {
            $classeur->setStatus(2);
        }
        else {
            $classeur->setStatus(1);
            $currentEtapeId = $currentEtape[$ordreEtape]->getId();
            $classeur->setOrdreValidant($classeur->getOrdreValidant() . ',' . $currentEtapeId);
        }

        $classeur->setOrdreEtape($ordreEtape);

        return $classeur;
    }

    /**
     * Retourne l utilisateur qui doit valider, celui qui a les droits sur le classeur
     *
     * @param Classeur $classeur
     * @param $user
     * @return object
     */
    public function classeurValidator(Classeur $classeur, $user) {

        $em = $this->getEntityManager();

        $classeurValidants = $this->getValidant($classeur);

        $classeurValidantsId = array();
        foreach ($classeurValidants as $classeurValidant) {
            $classeurValidantsId[] = $classeurValidant->getId();
        }

        $delegants = $em->getRepository('SesileDelegationsBundle:Delegations')->getDelegantsForUser($user);

        $delegantsId = array();
        foreach ($delegants as $delegant) {
            $delegantsId[] = $delegant->getDelegant()->getId();
        }

        // Avec délégation
        $userValidant = array_intersect($classeurValidantsId, $delegantsId);

        if ($userValidant) {
            $userValidant = $userValidant[0];
            $validator = $em->getRepository('SesileUserBundle:User')->find($userValidant);
        }
        // Sans délégation
        else {
            $validator = $user;
        }
        var_dump($validator->getId(), $validator->getNom(), $validator->getPrenom());

        return $validator;

    }

    /**
     * Retourne true or false selon si le classeur est délégué ou pas
     *
     * @param Classeur $classeur
     * @param $user
     * @return bool true|false
     */
    public function isDelegatedToUser(Classeur $classeur, $user) {

        $em = $this->getEntityManager();

        $classeurValidants = $this->getValidant($classeur);

        $classeurValidantsId = array();
        foreach ($classeurValidants as $classeurValidant) {
            $classeurValidantsId[] = $classeurValidant->getId();
        }

        $delegants = $em->getRepository('SesileDelegationsBundle:Delegations')->getDelegantsForUser($user);

        $delegantsId = array();
        foreach ($delegants as $delegant) {
            $delegantsId[] = $delegant->getDelegant()->getId();
        }

        // Avec délégation
        $userValidant = array_intersect($classeurValidantsId, $delegantsId);

        if ($userValidant) {
            return true;
        }
        // Sans délégation
        else {
            return false;
        }

    }

    public function setUserCopyForClasseur(Classeur $classeur, $usersCopy) {
        $em = $this->getEntityManager();

        if (null !== $classeur->getCopy()) {
            foreach ($classeur->getCopy() as $copy) {
                $classeur->removeCopy($copy);
            }
        }

        $usersCopyVisible = array();

        if ($usersCopy !== null) {

            foreach ($usersCopy as $userCopy) {
                list($cat, $id) = explode('-', $userCopy);

                if ($cat == "userpack") {

                    $userPack = $em->getRepository("SesileUserBundle:UserPack")->findOneById($id);
                    $users = $userPack->getUsers();
                    foreach ($users as $user) {
                        $classeur->addCopy($user);

                        is_array($classeur->getVisible()) ? $visible = $classeur->getVisible() : $visible = $classeur->getVisible()->toArray();
                        if (!in_array($user ,$visible)) {
                            $classeur->addVisible($user);
                        }
                    }
                } elseif ($cat == "user") {
                    $user = $em->getRepository("SesileUserBundle:User")->findOneById($id);
                    $classeur->addCopy($user);

                    is_array($classeur->getVisible()) ? $visible = $classeur->getVisible() : $visible = $classeur->getVisible()->toArray();
                    if (!in_array($user ,$visible)) {
                        $classeur->addVisible($user);
                    }
                }
            }
            $em->flush();
        }
        return $usersCopyVisible;

    }

}
