<?php

namespace Sesile\ClasseurBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ClasseursUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClasseursUsersRepository extends EntityRepository
{
    private static $classeursVisibles = null;
    private static $classeursRetractables = null;


    public function getClasseursVisibles($userid) {
        if(self::$classeursVisibles === null) {
            $em = $this->getEntityManager();
            $rsm = new ResultSetMappingBuilder($em);
            $rsm->addRootEntityFromClassMetadata('SesileClasseurBundle:Classeur', 'c');

            $sql = 'SELECT c.* FROM ClasseursUsers cu
                inner join Classeur c on cu.classeur_id = c.id
                WHERE c.visibilite = 0
                or (c.visibilite = -1 and cu.user_id = :userid)
                or (c.visibilite > 0 and cu.ordre >= (select ordre from `ClasseursUsers` d where d.classeur_id = cu.classeur_id and d.user_id = c.visibilite) and cu.user_id = :userid)
                group by cu.classeur_id';

            $query = $em->createNativeQuery($sql, $rsm)->setParameter('userid', $userid);

            try {
                self::$classeursVisibles = $query->getResult();
            } catch (\Doctrine\ORM\NoResultException $e) {
                self::$classeursVisibles = null;
            }
        }
        return self::$classeurVisibles;
    }

    public function getClasseursRetractables($userid) {
        if(self::$classeursRetractables === null) {
            $em = $this->getEntityManager();
            $rsm = new ResultSetMappingBuilder($em);
            $rsm->addRootEntityFromClassMetadata('SesileClasseurBundle:Classeur', 'c');

            $sql = 'SELECT * FROM Classeur c
                inner join ClasseursUsers cu on c.id = cu.classeur_id
                WHERE ordre = ((select d.ordre - 1 from ClasseursUsers d where d.user_id = c.validant and c.id = d.classeur_id))
                and cu.user_id  = :userid
                and c.status = 1';

            $query = $em->createNativeQuery($sql, $rsm)->setParameter('userid', $userid);

            try {
                self::$classeursRetractables = $query->getResult();
            } catch (\Doctrine\ORM\NoResultException $e) {
                self::$classeursRetractables = null;
            }
        }
        return self::$classeursRetractables;
    }
}
