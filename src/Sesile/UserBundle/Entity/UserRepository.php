<?php

namespace Sesile\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {

    public function findByUserPacks($userPack) {

        return $this
            ->createQueryBuilder('c')
            ->leftJoin('c.userPacks', 'u')
            ->where('u.id = :userid')
            ->setParameter('userid', $userPack)
            ->getQuery()
            ->getResult();
    }

    public function uploadFile($avatar, $user, $dirPath) {

        if ($avatar) {
            if ($user->getPath()) {
                $user->removeUpload($dirPath);
            }
            $avatarName = sha1(uniqid(mt_rand(), true)) . '.' . $avatar->guessExtension();
            $user->setPath($avatarName);
            $avatar->move(
                $dirPath,
                $avatarName
            );
        }
        return $user;
    }

    public function uploadSignatureFile($file, $user, $dirPath) {

        if ($file) {
            if ($user->getPathSignature()) {
                $user->removeUpload($dirPath);
            }
            $fileName = sha1(uniqid(mt_rand(), true)) . '.' . $file->guessExtension();
            $user->setPathSignature($fileName);
            $file->move(
                $dirPath,
                $fileName
            );
        }
        return $user;
    }

    /**
     * Fonction pour savoir si un user est dans des classeurs
     * https://www.youtube.com/watch?v=T1JOlxiEDXw
     *
     * @param $id
     * @return bool
     */
    public function isUserInClasseurs($id) {
        // On récupère tous les classeurs
        $em = $this->getEntityManager();
        $classeurs = $em->getRepository('SesileClasseurBundle:Classeur')->findAll();

        // Pour chaque classeur
        foreach($classeurs as $classeur) {

            // On récupère son déposant
            $idUser = $classeur->getUser();

            // Si l'user est déposant du classeur on retourne true
            if($idUser == $id) return true;

            // On récupère toutes ses étapes
            $tabEtapeClasseur = explode(',',$classeur->getOrdreValidant());
            // Pour chaque étape
            foreach($tabEtapeClasseur as $etapeClasseur){

                // Si l'étape classeur n'exsite pas, on passe
                if($etapeClasseur == null || $etapeClasseur == "") continue;

                // On reconstruit l'objet EtapeClasseur à partir de l'id récupéré
                $etape = $em->getRepository('SesileUserBundle:EtapeClasseur')->findOneById($etapeClasseur);

                // On récupère les users
                $users = $etape->getUsers()->toArray();

                // On récupère tous les userPacks
                $userPacks = $etape->getUserPacks();
                // Pour chaque userPacks
                foreach ($userPacks as $userPack) {
                    // On récupère tous les entitées users
                    $usersP = $userPack->getUsers();
                    $users = array_merge($users, $usersP->toArray());
                }
                // On enlève les doublons
                $users = array_unique($users);

                // Pour chaque user
                foreach($users as $user) {
                    // // Si l'user fait partie du classeur on retourne true
                    if($user->getId() == $id)  return true;
                }
            }
        }
        return false;
    }

    public function findByNameOrFirstName($value, $collectiviteId) {
        return $this
            ->createQueryBuilder('U')
            ->join('U.collectivite', 'C', 'WITH', 'C.id = :collectiviteId')
            ->setParameter('collectiviteId', $collectiviteId)
            ->where('CONCAT(U.Nom, \' \', U.Prenom) LIKE :value')
            ->orWhere('CONCAT(U.Prenom, \' \', U.Nom) LIKE :value')
            ->setParameter('value', '%' .$value. '%')
            ->getQuery()
            ->getResult();
    }
}
