<?php

namespace Sesile\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Sesile\MainBundle\Entity\Collectivite;

/**
 * GroupeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupeRepository extends EntityRepository
{
    public function findUsers (Groupe $groupe) {

        $users = array();

        // Etapes du Circuit
        $etapesGroupe = $groupe->getEtapeGroupes();
        foreach ($etapesGroupe as $etapeGroupe) {

            // UserPack des etapes
            $usersPacks = $etapeGroupe->getUserPacks();
            foreach ($usersPacks as $usersPack) {
                $users = array_merge($users, $usersPack->getUsers()->toArray());
            }

            // Liste des utilisateurs directement ajoutÃ©
            $users = array_merge($users, $etapeGroupe->getUsers()->toArray());
        }

        return array_unique($users);
    }

    /**
     * @param $circuitsId
     * @param $user
     * @param Collectivite $collectivite
     * @return array|Groupe[]
     * @throws \Doctrine\ORM\ORMException
     */
    public function getCircuits ($circuitsId, $user, Collectivite $collectivite) {

        $em = $this->getEntityManager();
//        $circuits = $em->getRepository('SesileUserBundle:Groupe')->findById($circuitsId);
        $circuits = $em->getRepository('SesileUserBundle:Groupe')->findBy(['id' => $circuitsId, 'collectivite' => $collectivite]);

        foreach ($circuits as $circuit) {
            $etapeDeposante = false;

            foreach ($circuit->getEtapeGroupes() as $etapeGroupe) {
                if(!$etapeDeposante) {
                    $circuit->removeEtapeGroupe($etapeGroupe);
                } else {
                    break;
                }

                $etapeDeposante = $em->getRepository('SesileUserBundle:EtapeGroupe')->isUserInEtape($etapeGroupe, $user->getId());
            }
        }

        return $circuits;
    }

    /**
     * @param string $email
     * @param integer $collectiviteId
     *
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getCircuitDataByUserAndCollectivite($email, $collectiviteId)
    {
        $sql = 'SELECT c.id as circuitId, c.nom as circuitName, t.nom as typeName, t.id as typeId
                FROM Groupe c
                LEFT JOIN classeur_groupe cg on cg.groupe_id= c.id
                LEFT JOIN TypeClasseur t on t.id=cg.typeclasseur_id
                LEFT JOIN EtapeGroupe eg on eg.groupe = c.id
                LEFT JOIN etapegroupe_user egu on egu.etapegroupe_id=eg.id
                LEFT JOIN User u on u.id=egu.user_id
                LEFT JOIN etapegroupe_userpack egup on egup.etapegroupe_id=eg.id
                LEFT JOIN UserPack up on up.id=egup.userpack_id
                LEFT JOIN userpack_user upu on upu.userpack_id=up.id
                LEFT JOIN User u2 on u2.id=upu.user_id
                WHERE (u.email= :userEmail or u2.email=:userEmail2) AND c.collectivite=:collectivityId
                GROUP BY c.id, t.id
        ';
        $params = [
            'userEmail' => $email,
            'userEmail2' => $email,
            'collectivityId' => $collectiviteId
        ];

        return $this->getEntityManager()->getConnection()->executeQuery($sql, $params)->fetchAll();
    }
}
